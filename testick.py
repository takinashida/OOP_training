# ‚úÖ –ó–ê–î–ê–ù–ò–ï 1: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å + –º–µ—Ç–æ–¥
# –°–æ–∑–¥–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Transport, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—ë—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
# start_engine()
# stop_engine()
# info() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
# –°–æ–∑–¥–∞–π –¥–≤–∞ –∫–ª–∞—Å—Å–∞-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞:
# Car (—Å –ø–æ–ª—è–º–∏ model, fuel)
# Bike (—Å –ø–æ–ª—è–º–∏ brand, speed)
# üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏ –≤—Å–µ @abstractmethod
# üîπ –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å Transport() ‚Äî —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
#
# ---
#
# ## ‚úÖ –ó–ê–î–ê–ù–ò–ï 2: –ú–∏–∫—Å–∏–Ω
# –°–æ–∑–¥–∞–π –º–∏–∫—Å–∏–Ω `LoggerMixin`, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥:
# * `log_action(action: str)` ‚Äî –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å: `"–õ–æ–≥: {–¥–µ–π—Å—Ç–≤–∏–µ}"`
# –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –º–∏–∫—Å–∏–Ω –≤ `Car`, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–æ—Å—å `"–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω"`.
#
# ---
#
# ## ‚úÖ –ó–ê–î–ê–ù–ò–ï 3: `__slots__`
# –î–æ–±–∞–≤—å `__slots__` –≤ –∫–ª–∞—Å—Å `Bike`, —á—Ç–æ–±—ã –æ–Ω —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ: `brand`, `speed`, `engine_on`.
# üîπ –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ `bike.color = "Red"` ‚Äî —É–±–µ–¥–∏—Å—å, —á—Ç–æ Python –Ω–µ –¥–∞—Å—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.
#
# ---
#
# ## ‚úÖ –ó–ê–î–ê–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ `isinstance` –∏ `issubclass`
#
# 1. –ü—Ä–æ–≤–µ—Ä—å: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `bike` —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º `Transport`
# 2. –ü—Ä–æ–≤–µ—Ä—å: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `Car` –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–º `Transport`
# 3. –£–±–µ–¥–∏—Å—å, —á—Ç–æ `LoggerMixin` ‚Äî —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–∏–ø `Transport`
#
# ---
#
# ## ‚úÖ –ó–ê–î–ê–ù–ò–ï 5: –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
#
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `launch(t: Transport)`, –∫–æ—Ç–æ—Ä–∞—è:
# * –≤—ã–∑—ã–≤–∞–µ—Ç `start_engine()` –∏ `info()`
# * —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å `Car`, `Bike` –∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º `Transport`
#
# ---

from abc import ABC, abstractmethod


class Transport(ABC):
    __slots__ = ()

    @abstractmethod
    def info(self):
        pass

    @abstractmethod
    def start_engine(self):
        pass

    @abstractmethod
    def stop_engine(self):
        pass


class LoggerMixin:

    def __init__(self, *args, **kwargs):
        #   super().__init__(*args, **kwargs)
        clas = self.__class__.__name__
        print(f"–û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ {clas} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:{args, kwargs}")

    def start_engine(self):
        print("–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")

    def stop_engine(self):
        print("–î–≤–∏–≥–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class Car(LoggerMixin, Transport):

    __slots__ = ("model", "fuel")

    def __init__(self, model, fuel):
        super().__init__(model, fuel)
        self.model = model
        self.fuel = fuel

    def info(self):
        print(f"Model: {self.model}, Consumed fuel: {self.fuel}")


class Bike(LoggerMixin, Transport):

    __slots__ = ("brand", "speed", "engine_on")

    def __init__(self, brand, speed, engine_on):
        self.brand = brand
        self.speed = speed
        self.engine_on = engine_on

    def info(self):
        print(f"Brand: {self.brand}, Top speed: {self.speed}")


def launch(t: Transport):
    t.info()
    t.start_engine()
    return


# # –ü—Ä–∏–º–µ—Ä Car —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# print("‚ñ∂ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
# mashina = Car("Toyota Camry", "–±–µ–Ω–∑–∏–Ω")
# mashina.start_engine()
# mashina.stop_engine()
#
# print("\n‚ñ∂ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç:")
# try:
#     mashina.color = "—Å–µ—Ä—ã–π"  # –î–æ–ø—É—Å—Ç–∏–º–æ, –µ—Å–ª–∏ __slots__ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ
# except AttributeError as e:
#     print("–û—à–∏–±–∫–∞:", e)
#
# # –ü—Ä–∏–º–µ—Ä Bike —Å __slots__
# print("\n‚ñ∂ –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:")
# bike = Bike("Yamaha", 25, False)
# bike.start_engine()
# bike.stop_engine()
#
# print("\n‚ñ∂ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å color —É Bike:")
# try:
#     bike.color = "–∫—Ä–∞—Å–Ω—ã–π"
# except IndentationError as e:
#     print("–û—à–∏–±–∫–∞:", e)
#
# # –ü—Ä–æ–≤–µ—Ä–∫–∞ isinstance / issubclass
# print("\n‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∏ isinstance –∏ issubclass:")
# print("bike —è–≤–ª—è–µ—Ç—Å—è Transport?", isinstance(bike, Bike))  # True
# print("Car —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–º Transport?", issubclass(Car, Bike))  # False
#
# car = Car("Toyota", "–±–µ–Ω–∑–∏–Ω")
# bike = Bike("Yamaha", 30, True)
#
# # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚Äî –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º!
# launch(car)
# launch(bike)
#
# # –ü—Ä–æ–≤–µ—Ä–∫–∞ isinstance
# print("‚úÖ car - Transport:", isinstance(car, Car))
# print("‚úÖ bike - Transport:", isinstance(bike, Bike))
#
#
# print(type(car).__name__)

car = Car("Toyota", "–±–µ–Ω–∑–∏–Ω")

print(car)
